{"remainingRequest":"/Applications/workspace/hxkj/lbc/html/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Applications/workspace/hxkj/lbc/html/src/utils/scatterutil.js","dependencies":[{"path":"/Applications/workspace/hxkj/lbc/html/src/utils/scatterutil.js","mtime":1550414173888},{"path":"/Applications/workspace/hxkj/lbc/html/node_modules/cache-loader/dist/cjs.js","mtime":1538297892045},{"path":"/Applications/workspace/hxkj/lbc/html/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1550321280906}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport _Promise from \"/Applications/workspace/hxkj/lbc/html/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Applications/workspace/hxkj/lbc/html/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Applications/workspace/hxkj/lbc/html/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/workspace/hxkj/lbc/html/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\nimport Vue from 'vue'; //加载scatter\n\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs2';\nimport { Api, JsonRpc, RpcError } from 'eosjs'; //初始化对象（使用eosj 或者scattereth，或者scattertron）\n\nScatterJS.plugins(new ScatterEOS());\nvar scatter = null;\nvar eosapi;\nvar network = {\n  blockchain: 'eos',\n  host: '150.109.41.13',\n  port: 8888,\n  protocol: 'http',\n  chainId: 'cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f'\n};\nvar rpc = new JsonRpc('http://150.109.41.13:8888');\nvar requiredFields = {\n  accounts: [network]\n}; //export命令定义了模块的对外接口\n\nvar Scatterutil =\n/*#__PURE__*/\nfunction () {\n  function Scatterutil() {\n    _classCallCheck(this, Scatterutil);\n  }\n\n  _createClass(Scatterutil, null, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", new _Promise(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee(resolve) {\n                    return regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            ScatterJS.scatter.connect(\"kpigame\").then(function (connected) {\n                              if (!connected) {\n                                resolve(\"false\");\n                                return false;\n                              }\n\n                              scatter = ScatterJS.scatter; //\n\n                              eosapi = scatter.eos(network, Api, {\n                                rpc: rpc,\n                                beta3: true\n                              }); // 必须清空对象防止泄露对象。\n\n                              window.scatter = null;\n                              resolve(\"true\");\n                            });\n\n                          case 1:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }() //获取授权用户\n\n  }, {\n    key: \"userinfo\",\n    value: function () {\n      var _userinfo = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", new _Promise(\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee3(resolve) {\n                    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            scatter.getIdentity(requiredFields).then(function () {\n                              var account = {\n                                name: \"\",\n                                eos: 0\n                              };\n\n                              if (scatter != null) {\n                                if (scatter.identity != null) {\n                                  //获取EOS的account\n                                  var accounts = scatter.identity.accounts.find(function (x) {\n                                    return x.blockchain === 'eos';\n                                  });\n                                  account.name = accounts.name;\n                                }\n                              }\n\n                              resolve(account);\n                            }).catch(function (error) {\n                              resolve(\"\");\n                              console.error(error);\n                            });\n\n                          case 1:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function userinfo() {\n        return _userinfo.apply(this, arguments);\n      }\n\n      return userinfo;\n    }()\n  }, {\n    key: \"userinfo\",\n    //获取授权用户\n    value: function () {\n      var _userinfo2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", new _Promise(\n                /*#__PURE__*/\n                function () {\n                  var _ref3 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee5(resolve) {\n                    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            scatter.getIdentity(requiredFields).then(function () {\n                              var account = {\n                                name: \"\",\n                                eos: 0\n                              };\n\n                              if (scatter != null) {\n                                if (scatter.identity != null) {\n                                  //获取EOS的account\n                                  var accounts = scatter.identity.accounts.find(function (x) {\n                                    return x.blockchain === 'eos';\n                                  });\n                                  account.name = accounts.name;\n                                }\n                              }\n\n                              resolve(account);\n                            }).catch(function (error) {\n                              resolve(\"\");\n                              console.error(error);\n                            });\n\n                          case 1:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5, this);\n                  }));\n\n                  return function (_x3) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function userinfo() {\n        return _userinfo2.apply(this, arguments);\n      }\n\n      return userinfo;\n    }()\n  }, {\n    key: \"transfer\",\n    //转账\n    value: function () {\n      var _transfer = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(num, memo) {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (scatter == null) {\n                  alert(\"请安装scatter插件！\");\n                }\n\n                return _context8.abrupt(\"return\", new _Promise(\n                /*#__PURE__*/\n                function () {\n                  var _ref4 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  regeneratorRuntime.mark(function _callee7(resolve) {\n                    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            //\n                            scatter.getIdentity(requiredFields).then(function () {\n                              var account = scatter.identity.accounts.find(function (x) {\n                                return x.blockchain === 'eos';\n                              });\n                              var transactionOptions = {\n                                authorization: [\"\".concat(account.name, \"@\").concat(account.authority)]\n                              };\n                              eosapi.transact({\n                                actions: [{\n                                  account: 'eosio.token',\n                                  name: 'transfer',\n                                  authorization: [{\n                                    actor: account.name,\n                                    permission: account.authority\n                                  }],\n                                  data: {\n                                    from: account.name,\n                                    to: 'test1',\n                                    quantity: '1.0000 EOS',\n                                    memo: memo\n                                  }\n                                }]\n                              }, {\n                                blocksBehind: 3,\n                                expireSeconds: 30\n                              }).then(function (result) {\n                                console.log(\" Transaction ID: \".concat(result.transaction_id));\n                              }).catch(function (error) {\n                                console.log(error);\n                              });\n                            }).catch(function (error) {\n                              console.error(error);\n                              resolve(\"false\");\n                            });\n\n                          case 1:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7, this);\n                  }));\n\n                  return function (_x6) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }()));\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function transfer(_x4, _x5) {\n        return _transfer.apply(this, arguments);\n      }\n\n      return transfer;\n    }()\n  }]);\n\n  return Scatterutil;\n}();\n\nexport { Scatterutil as default };",{"version":3,"sources":["/Applications/workspace/hxkj/lbc/html/src/utils/scatterutil.js"],"names":["Vue","ScatterJS","ScatterEOS","Api","JsonRpc","RpcError","plugins","scatter","eosapi","network","blockchain","host","port","protocol","chainId","rpc","requiredFields","accounts","Scatterutil","resolve","connect","then","connected","eos","beta3","window","getIdentity","account","name","identity","find","x","catch","error","console","num","memo","alert","transactionOptions","authorization","authority","transact","actions","actor","permission","data","from","to","quantity","blocksBehind","expireSeconds","result","log","transaction_id"],"mappings":"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","sourcesContent":["import Vue from 'vue'\n//加载scatter\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs2';\n\nimport { Api, JsonRpc, RpcError } from 'eosjs';\n\n//初始化对象（使用eosj 或者scattereth，或者scattertron）\nScatterJS.plugins(new ScatterEOS());\n\nlet scatter = null;\nlet eosapi;\n\nconst network = {\n    blockchain:'eos',\n    host:'150.109.41.13',\n    port:8888,\n    protocol:'http',\n    chainId:'cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f'\n};\n\nconst rpc = new JsonRpc('http://150.109.41.13:8888');\n\nconst requiredFields = { accounts: [network] };\n\n//export命令定义了模块的对外接口\nexport default class Scatterutil {\n\n    static async init() {\n        //ES6 Promise\n        return new Promise(async resolve => {\n            ScatterJS.scatter.connect(\"kpigame\").then(connected => {\n                if (!connected) {\n                resolve(\"false\");\n                return false;\n            }\n            scatter = ScatterJS.scatter;\n            //\n            eosapi = scatter.eos(network, Api, { rpc, beta3:true });\n            // 必须清空对象防止泄露对象。\n            window.scatter = null;\n            resolve(\"true\");\n        })\n    });\n}\n\n//获取授权用户\nstatic async userinfo() {\n\n    return new Promise(async resolve => {\n        scatter.getIdentity(requiredFields).then(() => {\n            let account = { name: \"\", eos: 0 };\n        if (scatter != null) {\n            if (scatter.identity != null) {\n                //获取EOS的account\n                const accounts = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                account.name = accounts.name;\n            }\n        }\n        resolve(account);\n\n    }).catch(error => {\n        resolve(\"\");\n    console.error(error);\n});\n});\n};\n\n//获取授权用户\nstatic async userinfo() {\n\n    return new Promise(async resolve => {\n        scatter.getIdentity(requiredFields).then(() => {\n            let account = { name: \"\", eos: 0 };\n        if (scatter != null) {\n            if (scatter.identity != null) {\n                //获取EOS的account\n                const accounts = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                account.name = accounts.name;\n            }\n        }\n        resolve(account);\n\n    }).catch(error => {\n        resolve(\"\");\n    console.error(error);\n});\n});\n};\n\n//转账\nstatic async transfer(num, memo) {\n    if (scatter == null) {\n        alert(\"请安装scatter插件！\");\n    }\n    return new Promise(async resolve => {\n        //\n        scatter.getIdentity(requiredFields).then(() => {\n            const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n        const transactionOptions = { authorization: [`${account.name}@${account.authority}`] };\n\n    eosapi.transact({\n        actions: [{\n            account: 'eosio.token',\n            name: 'transfer',\n            authorization: [{\n                actor: account.name,\n                permission: account.authority ,\n            }],\n            data: {\n                from: account.name,\n                to: 'test1',\n                quantity: '1.0000 EOS',\n                memo: memo\n            },\n        }]\n    }, {\n        blocksBehind: 3,\n        expireSeconds: 30,\n    }).then(result => {\n        console.log(` Transaction ID: ${result.transaction_id}`);\n}).catch(error => {\n    console.log(error);\n});\n\n}).catch(error => {\n    console.error(error);\nresolve(\"false\");\n});\n});\n};\n\n\n}\n"]}]}